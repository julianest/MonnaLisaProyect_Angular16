name: Angular Banksoft CI/CD

on:
  push:
    branches: ["developer"]
  workflow_dispatch:

permissions:
  contents: read
  packages: write

jobs:
  # Paso 1: Build
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout código fuente
        uses: actions/checkout@v4

      - name: Configurar Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 18

      - name: Instalar dependencias
        run: npm ci

  # Paso 2: Tests (Depende de Build)
  test:
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Checkout código fuente
        uses: actions/checkout@v4

      - name: Configurar Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 18

      - name: Instalar dependencias
        run: npm ci

      - name: Ejecutar pruebas unitarias
        run: npm test -- --code-coverage --browsers=ChromeHeadless --watch=false

  # Paso 3: Análisis de Código (Depende de Tests)
  code_analysis:
    runs-on: ubuntu-latest
    needs: test
    steps:
      - name: Checkout código fuente
        uses: actions/checkout@v4

      - name: Configurar Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 18

      - name: Instalar dependencias
        run: npm ci

      - name: Análisis con SonarQube
        uses: SonarSource/sonarqube-scan-action@master
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
          SONAR_HOST_URL: ${{ secrets.SONAR_HOST_URL }}
        continue-on-error: true # No bloquea el flujo si falla
        with:
          args: >
            -Dsonar.organization=julianest
            -Dsonar.projectKey=julianest_MonnaLisaProyect_Angular16
            -Dsonar.sources=src
            -Dsonar.branch.name=${{ github.ref_name }}
            -Dsonar.exclusions=**/*.css,**/*.yml
            -Dsonar.javascript.lcov.reportPaths=coverage/lcov.info

  # Paso 4: Obtener última versión para versionado automático.
  versioning:
    runs-on: ubuntu-latest
    needs: code_analysis
    steps:
      - name: Obtener última versión de la imagen Docker
        id: versioning
        run: |
          RESPONSE=$(curl -s -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
          https://ghcr.io/v2/${{ github.repository_owner }}/angular-app/tags/list)

          TAGS=$(echo "$RESPONSE" | jq -r '.tags // empty')

          if [[ -z "$TAGS" || "$TAGS" == "null" ]]; then
            VERSION="v1.0.0"
          else
            VERSION=$(echo "$TAGS" | jq -r 'map(select(test("v[0-9]+\\.[0-9]+\\.[0-9]+$"))) | sort | last')

            if [[ -z "$VERSION" || "$VERSION" == "null" ]]; then
              VERSION="v1.0.0"
            else
              IFS='.' read -r major minor patch <<< "${VERSION#v}"
              PATCH=$((patch + 1))
              VERSION="v$major.$minor.$PATCH"
            fi
          fi

          echo "VERSION=$VERSION"
          echo "VERSION=$VERSION" >> $GITHUB_ENV

  # Paso 5: Construcción y Publicación.
  docker_build_push:
    runs-on: ubuntu-latest
    needs: versioning
    steps:
      - name: Checkout código fuente
        uses: actions/checkout@v4

      - name: Construir imagen Docker
        run: docker build -t ghcr.io/${{ github.repository_owner }}/angular-app:${{ env.VERSION }} -f Containerfile .

      - name: Autenticación en GitHub Container Registry
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Subir imagen Docker al registro
        run: docker push ghcr.io/${{ github.repository_owner }}/angular-app:${{ env.VERSION }}
